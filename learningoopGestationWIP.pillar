! The following chapters are about to be written

${inputFile:Chapters/Converter/Converter2.pillar}$

${inputFile:Chapters/Tamagoshi/Tamagoshi.pillar}$


!!! Todo
Volume one
- Use LAN of Damien
- Implement game collector app -> probably in a different booklet
- Reread and implement Game of life
- finish Sending messages (==not==)

Volume two 
- Visitor
- Interpreter



!!!! Volume two
More exercises
- Uno why not *https://github.com/cdlm/kata-uno*

Lire
- Implement sokoban
- Beacons
- Ants
- Parser
- Implementation turtle



! Second Volume 

%${inputFile:Chapters/SyntaxGlimpse/SyntaxGlimpse.pillar}$ 

%${inputFile:Chapters/BeaconAndSatellite/BeaconAndSatellite.pillar}$




! Sending messages

${inputFile:Chapters/DoubleDispatch/DoubleDispatch.pillar}$

${inputFile:Chapters/PaperStoneScissor/PaperStoneScissor.pillar}$

!! Playing with Visitors

Here I should take the slides flow from the design mooc lectures. 
Visitor then after I should make sure that we only return expressions
of the same domain and with a stack.

Next one is Visitor!!!


!! Playing with Interpreters

Returning an integer is not really nice because we cross boundaries.

!!! Using the Pharo execution stack

[[[
EEvaluator >> visitMultiplication: aMultiplication
	^ (EConstant new
		value: (self evaluate: aMultiplication left) * 
					(self evaluate: aMultiplication right)  
]]]

!!! With an explicit interpretation  stack
[[[
EEvaluator >> visitMultiplication: aMultiplication
	self evaluate: aMultiplication left.
	self evaluate: aMultiplication right.
	self push: (EConstant new
					value: self pop value * self pop value)  
]]]


!! Parsing alain?


