!! Solutions
@cha:solutions


!!! Electronic wallet
@sec:wallet
Here are the possiblle solutions of the implementation we asked for the Wallet Chapter *@cha:wallet*. 

!!!! Using a bag for a wallet
[[[
Wallet >> add: anInteger coinsOfValue: aCoin
	"Add to the receiver, anInteger times a coin of value aNumber"

	bagCoins add: aCoin withOccurrences: anInteger 
]]]

We can add elements one by one to a bag using the message ==add:== or specifying the number of occurences of the element using the message ==add:withOccurrences:==. 

[[[
Wallet >> coinsOfValue: aNumber

	^ bagCoins occurrencesOf: aNumber
]]]

!!!! Testing money

[[[
Wallet >> money
	"Return the value of the receiver by summing its constituents"
	| money |
	money := 0.
	bagCoins doWithOccurrences:
			[ :elem : occurrence | 
				money := money + ( elem * occurrence ) ].
	^ money
]]]

!!!! Checking to pay an amount
[[[
Wallet >> canPay: amounOfMoney
	"returns true when we can pay the amount of money"
	^ self money >= amounOfMoney
]]]

!!!! Biggest coin

[[[
Wallet >> biggest
	"Returns the biggest coin with a value below anAmount. For example, {(3 -> 0.5) . (3 -> 0.2) . (5-> 0.1)} biggest -> 0.5"

	^ bagCoins sortedElements last key
]]]


!!!! Biggest below a value
[[[
Wallet >> biggestBelow: anAmount
	"Returns the biggest coin with a value below anAmount. For example, {(3 -> 0.5) . (3 -> 0.2) . (5-> 0.1)} biggestBelow: 0.40 -> 0.2"
	
	bagCoins doWithOccurrences: [ :elem :occurrences |
			anAmount > elem ifTrue: [ ^ elem ] ].
	^ 0
]]]

!!!! Improving the API

[[[
Wallet >> addCoin: aNumber
	"Add to the receiver a coin of value aNumber"
	
	bagCoins add: aNumber withOccurrences: 1 
]]]


[[[
Wallet >> removeCoin: aNumber
	"Remove from the receiver a coin of value aNumber"
	
	bagCoins remove: aNumber ifAbsent: [] 
]]]

!!!! Coins for paying: First version

[[[
Wallet >> coinsFor: aValue
	"Returns a wallet with the largest coins to pay a certain amount and an empty wallet if this is not possible"
	| res |
	res := self class new.
	^ (self canPay: aValue)
		ifFalse: [ res ]
		ifTrue: [ self coinsFor: aValue into2: res ] 
]]]

[[[
Wallet >> coinsFor: aValue into2: accuWallet
	| accu |
	[ accu := accuWallet money.
	accu < aValue ]
		whileTrue: [
			| big |
			big := self biggest.
			[ big > ((aValue - accu) roundUpTo: 0.1) ] 
				whileTrue: [ big := self biggestBelow: big ].
			self removeCoin: big.
			accuWallet addCoin: big ].
	^ accuWallet 
]]]







!!! Die DSL 
@sec:dsl
Here are the possiblle solutions of the implementation we asked for the DSL Chapter *@cha:dsl*. 

!!!! Define class Die

[[[
Object subclass: #Die
	instanceVariableNames: 'faces'
	classVariableNames: ''
	package: 'Dice'
]]]

[[[
Die >> initialize
	super initialize.
	faces := 6
]]]

!!!! Rolling a die

[[[
Die >> roll
    ^ faces atRandom
]]]

!!!! Define class DieHandle

[[[
Object subclass: #DieHandle
	instanceVariableNames: 'dice'
	classVariableNames: ''
	package: 'Dice'
]]]

[[[
DieHandle >> initialize
	super initialize.
	dice := OrderedCollection new.
]]]

!!!! Die addition

[[[
DieHandle >> addDie: aDie 
	dice add: aDie
]]]

!!! Rolling a dice handle

[[[
DieHandle >> roll
	
	| res |
	res := 0.
	dice do: [ :each | res := res + each roll ].
	^ res
]]]

!!! Role playing syntax

[[[
Integer >> D20
	| handle |
	handle := DieHandle new.
	self timesRepeat: [ handle addDie: (Die withFaces: 20)].
	^ handle
]]]

[[[
Integer >> D: anInteger
	
	| handle |
	handle := DieHandle new.
	self timesRepeat: [ handle addDie: (Die withFaces: anInteger)].
	^ handle
]]]

!!! Adding DieHandles

[[[
DieHandle >> + aDieHandle
	"Returns a new handle that represents the addition of the receiver and the argument."
	| handle |
	handle := self class new.
	self dice do: [ :each | handle addDie: each ].
	aDieHandle dice do: [ :each | handle addDie: each ].
	^ handle
]]]

This definition only works if the method ==dice== defined below has been defined

[[[
DieHandle >> dice
	^ dice 
]]]

Indeed the first expression ==self dice do: == could be rewritten as ==dice do: == because dice is an instance variable of the class ==DieHandle==. Now the expression ==aDieHandle dice do: == cannot. Why? Because in Pharo you cannot access the state of another object directly. Here ==2 D20==  is one handle and ==3 D10== another one. The first one cannot access the dice of the second one directly (while it can accessed its own). Therefore there is a need to define a message that provide access to the dice. 


!!! Expression chapter
@sec:expressionsolutions

!!!! Evaluate message
[[[
EConstant >> evaluate
	^ value
]]]

[[[
ENegation >> evaluate
	^ expression evaluate negated
]]]

[[[
EAddition >> evaluate
	^ left evaluate + right evaluate
]]]

[[[
EMultiplication  >> evaluate
	^ left evaluate + right evaluate
]]]


!!!! Negated message

[[[
EAddition >>> negated 
	^ ENegation new expression: self
]]]

[[[
EMultiplication >>> negated 
	^ ENegation new expression: self
]]]


!!!! Better class instance creation interface

[[[
ENegation class >> expression: anExpression
	^ self new expression: anExpression
]]]


[[[
EMultiplication class >>	left: anExp right: anExp2
	^ self new left: anExp ; right: anExp2
]]]

!!!! Printing addition and multiplication
[[[
EAddition >> printOn: aStream
	aStream nextPutAll: '( '.
	left printOn: aStream. 
	aStream nextPutAll: ' + '.
	right printOn: aStream.
	aStream nextPutAll: ' )'
]]]

[[[
Emultiplication >> printOn: aStream
	aStream nextPutAll: '( '.
	left printOn: aStream. 
	aStream nextPutAll: ' * '.
	right printOn: aStream.
	aStream nextPutAll: ' )'
]]]


!!!! Negated negation

[[[
ENegation >> negated
	^ expression
]]]

!!!! evaluateWith:

[[[
EMultiplication >> evaluateWith: anObject
	^ (right evaluateWith: anObject) + (left evaluateWith: anObject)
]]]
