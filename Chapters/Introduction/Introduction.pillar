!! About this book 
@ch:about

!!! A word of presentation

I started to write this book back in 1998 when I wrote around 900 pages in preparation for ''Learning Programming with Robots''.
Apparently I needed to write to understand what I wanted to explain and how.
From this I extracted ''Learning Programming with Robots'', which was a book to teach simple concepts such as variables, loops, procedures and to help people teach kids how to program.
But in fact, I got really frustrated because to be understandable by everyone I had to remove what I like: object-oriented programming and good object-oriented design.
At that time, I met Harald Wertz, who gave me nice ideas and pointers such as L-systems, then asked why I focused on procedural thinking and suggested that I teach object-oriented programming instead.
And he was right. This remark was like a bee in my bonnet for more than ten years.
In fact, it was my original objective but I was exhausted after my first attempt.

Now, nearly ten years later, I'm ready to write a book to start with object-oriented programming.
I hope that you will enjoy it as much as I did —even if, for me, writing a book is a really long and daunting task.


!!! Structure of the book

While writing this book, I faced a challenge to find the correct level of difficulty.
To solve this problem, I structured the book either into key chapters on basic concepts, or into projects on more advanced topics.
The projects are little tutorials or more realistic examples, with step by step explanations; you can skip over them and come back to read them whenever you feel like it.
I also propose various paths through the book with different levels of reading; however, many of the ''simpler'' chapters also contain design remarks.

+Reading maps.>file://figures/Map.pdf|width=100|label=fgmap+

!!!! Fast track
The following chapters contain more conceptual information:

In the volume 1
- Glimpse of the Syntax
- Tests, tests and tests
- Objects and Classes
- Revisiting Objects and Classes
- Domain Specific Language
- Inheritance and Expressions
- Sending Messages
- Snakes and Ladders

In the volume 2
- Stone Paper Scissors
- Visitors
- Aliens and Sheeps


!!! What you will learn

I would like to present the concepts that I want to teach you and that hopefully you should acquire. What is key to understand is that I will focus on the ''key'' conceptual elements. It is easy for me because I will not explain OOP/D in general but within the context of Pharo and Pharo is the essence of Object-Oriented programming since its object model is minimal but it covers the key and essential aspect of OOP. For example we will not present method modifiers, types, overloading (which is a bad concept).

We will focus on object-oriented ''programming'' concepts:
- Objects / Classes 
- Messages / Methods
- ==self== and its semantics
- Inheritance
- ==super== and its semantics

…and on object-oriented ''design'' concepts:
- Class responsibility collaboration
- Delegation
- Message sends are choice (what would be the equivalent to not)
- Message sends are plans for reuse
- Double Dispatch
- The "Don't ask, tell" Principle
- Tests are your life ensurance
- Polymorphism
- Composite Pattern
- Visitor Pattern
- Hook template Design Pattern
- Strategy Design Pattern

!!!! Syntax, Blocks and Iterators
Since we need a language to express our programs, we will teach you the syntax of Pharo. In particular we will use some simple chapters to get you started. 

Now in a nutshell you should know that the Pharo syntax
- fits in one postcard; 
- is based on objects, messages and closures;
Closures are not a late addition to the language but a central cornestone. They enable this messages all over syntax as well as really powerful iterators.

!!! Typographic conventions

Pharo expressions or code snippets are represented either in the text as =='Hello'== and =='Hello reversed==, or for more substantial snippets, as follows:
[[[
'Hello'
]]]

When we want to show the result of evaluating an expression, we show the result after three chevrons ==>>>== on the next line, like so:
[[[
'Hello' reversed
>>> 'olleH'
]]]

Whenever we feel the text makes a point that is important or technical enough to be highlighted, we will do so with a thick bar:

@@important This is a point that is worth drawing some more attention.

Finally, the coffee cups highlight some points to take away and serve as a concise summary of the sections :

@@coffee If you skim through a section, take a few seconds to check for coffee cups!

!!! Videos 

In this book we will use some of the videos produced for the Pharo mooc. All the videos are available at *http://mooc.pharo.org*.

!!! Thanks
I would like to thanks Morgane Pigny, Quentin Ducasse, Sven van Caekenberghe, Hayatou Oumarou, Kateryna Aloshkina, Ricardo Pacheco, Olivier Auverlot, Mariette Biernacki, Amal Noussi for their great feedback.
Alexandre Bergel for his examples on messages. Olivier Auverlot for his constant enthousiam and for Tinychat. Guillermo Polito for the idea of this cool example of files and directories.

!!! Todo
Volume one
- Use LAN of Damien
- Implement game collector app
- Reread and implement Game of life
- Read tinychat
- Sending messages (==not==)

Volume two 
- Visitor
- Interpreter
-



!!!! Volume two
More exercises
- Uno why not *https://github.com/cdlm/kata-uno*

Lire
- Implement sokoban
- Beacons
- Ants
- Parser
- Implementation turtle
