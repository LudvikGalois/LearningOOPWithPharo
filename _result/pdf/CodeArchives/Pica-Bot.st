Morph subclass: #Bot	instanceVariableNames: 'direction shown penColor penSize drawSelector image turtleBuffer vars memorizedPoints'	classVariableNames: 'DefaultDisplaySelector DrawSelector Halos Image'	poolDictionaries: ''	category: 'Pica-Bot'!!Bot commentStamp: 'sd 1/3/2005 09:19' prior: 0!The class Bot defines a robot that can move, turn, look like circle or triangle.The robot can have different shapes using lookLikeBot, lookLikeTriangle...It can also have an image that is drawn by the user. Todo:	recategorise the methods for the methods browser		fix ratio problem wen drawing the bot	load as menu	check looklike flow...	remove sketchorph extensions!!Bot methodsFor: 'basic operations' stamp: 'sd 7/9/2002 10:52'!absoluteAngleToPointAt: aPoint 	"Return the direction that should turn a turtle to point in  	direction of a given point."	| dx dy position |	position := self center.	dx := aPoint x - position x.	dy := aPoint y - position y.	^ dx > 0		ifTrue: [(dy / dx) arcTan radiansToDegrees negated]		ifFalse: [dx < 0				ifTrue: [180 + (dy / dx) arcTan radiansToDegrees negated]				ifFalse: [90 * dy negated sign]]! !!Bot methodsFor: 'basic operations' stamp: 'sd 2/17/2005 21:15'!beInvisible	"Make the receiver invisible"		self yield.	shown := false.	self changed! !!Bot methodsFor: 'basic operations' stamp: 'sd 2/17/2005 21:15'!beVisible	"Make the receiver visible"		self yield.	shown := true.	self changed! !!Bot methodsFor: 'basic operations' stamp: 'sd 7/9/2002 10:48'!distanceFrom: aPoint 	"Return the distance from the receiver to a given point"	^ self center dist: aPoint.! !!Bot methodsFor: 'basic operations' stamp: 'sd 1/3/2005 21:45'!passImageToClass	"the image that is associated to a robot is now the one that will be used for the newly created robots"		Image := image! !!Bot methodsFor: 'basic operations' stamp: 'sd 8/10/2004 14:09'!positionIfGo: aDistance 	"Return the point that is at a distance aDistance in the direction 	pointed by the receiver"		^ self center + (direction degreeCos @ direction degreeSin negated * aDistance) rounded! !!Bot methodsFor: 'basic operations' stamp: 'sd 7/9/2002 10:48'!positionInDirectionForDistance: aDistance 	"Return the point that is at a distance aDistance in the direction 	pointed by the receiver"		^ self center + (direction degreeCos @ direction degreeSin negated * aDistance) rounded! !!Bot methodsFor: 'basic operations' stamp: 'NS 7/29/2002 16:48'!startingPlace	^ self owner bounds center! !!Bot methodsFor: 'private morphic' stamp: 'sd 1/3/2005 22:09'!addHandlesTo: aHaloMorph box: box	"Add halo handles to the halo.  Apply the halo filter if appropriate"	aHaloMorph haloBox: box.		Halos "(self createHalosSpec: self rawHaloSpec)"		do: [:aSpec | 			aHaloMorph perform: aSpec addHandleSelector with: aSpec].	! !!Bot methodsFor: 'private morphic' stamp: 'sd 3/19/2005 20:34'!balloonFeedback		self		balloonFont: (StrikeFont familyName: #ComicPlain size: 17).	self		balloonColor: ((Color				r: 1.0				g: 1.0				b: 0.6)				alpha: 0.5).	self setBalloonText: ('I''m a ' , self class name , '. \ My position is: ' , self center asString , ' and my direction is: ' , direction asString) withCRs! !!Bot methodsFor: 'private morphic' stamp: 'nk 2/7/2005 08:04'!center: aPoint	super center: aPoint.	self yield.! !!Bot methodsFor: 'private morphic' stamp: 'nk 2/7/2005 13:35'!handlesMouseDown: evt	"true means that the morph can react when the mouse down over it"	^ evt redButtonPressed! !!Bot methodsFor: 'private morphic' stamp: 'sd 6/28/2002 11:19'!handlesMouseOver: evt 	"true means that the morph can react when the mouse passes over it"	^ true! !!Bot methodsFor: 'private morphic' stamp: 'sd 6/22/2002 22:23'!highlightError		self shake.	! !!Bot methodsFor: 'private morphic' stamp: 'sd 6/28/2002 11:19'!mouseEnter: evt 	"true means that the morph can react when the mouse passes over it"	self balloonFeedback! !!Bot methodsFor: 'private morphic' stamp: 'sd 1/2/2005 19:27'!openSketchEditor	"| sketchmorph |	image isNil ifTrue: [image := (Form extent: 100 @ 100 depth: Display depth)].	sketchmorph := (SketchMorph withForm: image) 						center: self currentWorld center ; 					openInWorld;					editDrawing.	self halt.	sketchmorph isNil ifFalse: [self image: sketchmorph form].	self lookLikeImage.	sketchmorph delete"		| aWorld bnds sketchEditor formToEdit aPaintBox |		(aWorld := self world) assureNotPaintingElse: [^ self].	aWorld prepareToPaint.	aWorld displayWorld.	image isNil ifTrue: [image := (Form extent: 100 @ 100 depth: Display depth)].	formToEdit := image.	"bnds := (submorphs second boundsInWorld origin extent: formToEdit extent) intersect: aWorld bounds.	bnds := (aWorld paintingBoundsAround: a center) merge: bnds."	bnds := (aWorld paintingBoundsAround: aWorld center).	sketchEditor := SketchEditorMorph new.	aWorld addMorphFront: sketchEditor.	sketchEditor 		initializeFor: ((SketchMorph withForm: formToEdit) 							position: aWorld center)  		inBounds: bnds pasteUpMorph: aWorld paintBoxPosition: bnds topRight.	sketchEditor		afterNewPicDo: [:aForm :aRect |						"self updateThumbnail."			self image: aForm.			self east.			self lookLikeImage.			(aPaintBox := aWorld paintBoxOrNil) ifNotNil: [aPaintBox delete]] 		ifNoBits:			[(aPaintBox := aWorld paintBoxOrNil) ifNotNil: [aPaintBox delete]].	! !!Bot methodsFor: 'private' stamp: 'sd 5/3/2004 09:42'!alpha		^ "self color alpha" 0.9! !!Bot methodsFor: 'private' stamp: 'NS 6/27/2002 17:44'!calcBoundsForExtent: aPoint 	| newExtent origin corner |	newExtent := aPoint max: 30 @ 30.	newExtent := newExtent // 2.	origin := self center - newExtent.	corner := self center + newExtent.	^ origin corner: corner.! !!Bot methodsFor: 'private' stamp: 'NS 6/27/2002 22:23'!canonicalAngle: anAngle 	"returns an angle between 180 and -179"		| angle |	angle := anAngle \\ 360.	^ angle > 180		ifTrue: [angle - 360]		ifFalse: [angle]! !!Bot methodsFor: 'private' stamp: 'sd 2/19/2005 13:16'!direction: anAngle 	self yield.	anAngle = self direction		ifTrue: [^ self].	direction := self canonicalAngle: anAngle.	self clearBotBuffer.	self changed! !!Bot methodsFor: 'private' stamp: 'NS 6/27/2002 10:36'!drawSelector: aSymbol	drawSelector _ aSymbol.	self changed.! !!Bot methodsFor: 'private' stamp: 'sd 1/6/2005 10:13'!privateInitialize		self getImageFromClass.	drawSelector := self class drawSelector.	vars := Dictionary new.	memorizedPoints := OrderedCollection new.! !!Bot methodsFor: 'advanced operations' stamp: 'sd 6/28/2002 11:36'!angleToPointAt: aPoint 	"return the angle between the current direction and the angle made to point at a given point"	^ (self absoluteAngleToPointAt: aPoint) - (self direction \\ 360)	 ! !!Bot methodsFor: 'advanced operations' stamp: 'sd 6/28/2002 11:36'!angleToPointInDirection: anAngle	^(self canonicalAngle: (anAngle - self direction))! !!Bot methodsFor: 'interaction' stamp: 'nk 2/7/2005 07:43'!anyButtonPressed	^BotProcess anyButtonPressed! !!Bot methodsFor: 'interaction' stamp: 'nk 2/7/2005 07:44'!blueButtonPressed	^BotProcess blueButtonPressed! !!Bot methodsFor: 'interaction' stamp: 'nk 2/7/2005 07:44'!redButtonPressed	^BotProcess redButtonPressed! !!Bot methodsFor: 'interaction' stamp: 'sd 3/7/2004 22:07'!wand	"self new wand"		[self anyButtonPressed]		whileFalse: [self go: 30 atRandom.			self turnLeft: 30 atRandom]! !!Bot methodsFor: 'interaction' stamp: 'nk 2/7/2005 07:44'!yellowButtonPressed	^BotProcess yellowButtonPressed! !!Bot methodsFor: '*Pica-Ned' stamp: 'nk 2/6/2005 14:02'!balloonClosing: aBalloon	self removeProperty: #codeBalloon.	super balloonClosing: aBalloon.! !!Bot methodsFor: '*Pica-Ned' stamp: 'sd 2/8/2005 14:58'!codeBalloon	| balloon |	balloon := self valueOfProperty: #codeBalloon ifAbsentPut: 					[ (BotCodeBalloonMorph string: '  ' for: self corner: #topLeft) openInWorld ].	ActiveHand newKeyboardFocus: balloon.	^balloon! !!Bot methodsFor: '*Pica-Ned' stamp: 'nk 2/6/2005 14:06'!codeBalloonOrNil	^self valueOfProperty: #codeBalloon! !!Bot methodsFor: '*Pica-Ned' stamp: 'nk 2/6/2005 14:07'!delete	self codeBalloonOrNil ifNotNilDo: [ :cb | cb delete ].	super delete.! !!Bot methodsFor: '*Pica-Ned' stamp: 'nk 2/7/2005 13:46'!mouseUp: evt 	| balloon |	balloon := self codeBalloonOrNil.	balloon ifNil: [ self talk ]		ifNotNil: [ balloon delete ]! !!Bot methodsFor: '*Pica-Ned' stamp: 'nk 2/6/2005 14:06'!talk	self codeBalloon! !!Bot methodsFor: 'old private drawing' stamp: 'sd 8/10/2004 14:10'!circleDrawOn: aCanvas position: aPoint color: aColor 	"Draw the receiver as a circle."		| myExtent myCenter diameter |	myExtent := self extent.	myCenter := aPoint + (myExtent // 2).	diameter := myExtent x min: myExtent y.	aCanvas		fillOval: (Rectangle center: myCenter extent: diameter * 0.85)		color: aColor.	aCanvas		line: myCenter		to: (self positionIfGo: diameter // 2 - 1)				- self center + myCenter		width: 2		color: Color black! !!Bot methodsFor: 'old private drawing' stamp: 'sd 1/2/2005 12:12'!imageDrawOn: aCanvas position: aPoint color: aColor 		| formAndOffset form offset scaleFactor myCenter |	scaleFactor := self imageScaleFactor.	Transcript show: scaleFactor asString ; cr. 	formAndOffset := WarpBlt				rotate: image				degrees: self direction				center: image center				scaleBy: 1				smoothing: 1.	form := formAndOffset at: 1.	offset := formAndOffset at: 2.	myCenter := aPoint + (self extent // 2).	aCanvas		image: form		at: myCenter - (image extent // 2) + offset		sourceRect: form boundingBox		rule: Form paint! !!Bot methodsFor: 'old private drawing' stamp: 'sd 8/10/2004 14:10'!robotDrawOn: aCanvas position: aPoint color: aColor 	"Draw the receiver as a robot. Draw the receiver as a circle. Before the circle and triangle were 	not drawn using the WarpBlt therefore they had to perform  	the rotation themselves"		| myExtent myCenter diameter farPoint rayon |	myExtent := self extent.	myCenter := aPoint + (myExtent // 2).	diameter := myExtent x min: myExtent y.	rayon := diameter // 2.	farPoint := (self positionIfGo: rayon - 1)				- self center + myCenter.	aCanvas		fillRectangle: (Rectangle center: myCenter - (0 @ (rayon * 0.75)) extent: rayon @ (diameter * 0.25))		color: Color gray.	aCanvas		fillRectangle: (Rectangle center: myCenter + (0 @ (rayon * 0.75)) extent: rayon @ (diameter * 0.25))		color: Color gray.	aCanvas		fillOval: (Rectangle center: myCenter extent: diameter * 0.75)		color: aColor.	aCanvas		line: myCenter		to: farPoint		width: 2		color: Color black.	aCanvas		fillOval: (Rectangle center: farPoint extent: 4)		color: Color red! !!Bot methodsFor: 'old private drawing' stamp: 'sd 5/2/2004 18:30'!triangleDrawOn: aCanvas position: aPoint color: aColor 	"Draw the receiver as a triangle. Draw the receiver as a circle.  	Before the circle and triangle were not drawn using the WarpBlt 	therefore they had to perform the rotation themselves"		| min p1 p2 p3 dir vertices center degrees myExtent |	myExtent := self extent.	center := aPoint + (myExtent // 2).	min := (myExtent x min: myExtent y)				// 2.	dir := (min / 2 sqrt) truncated.	dir := dir @ (dir - 2).	p1 := center - dir.	dir := dir x @ dir y negated.	p2 := center - dir.	p3 := center x + min @ center y.	vertices := Array				with: p1				with: p2				with: p3.	"the following will be removed because the image will do the  	rotation"	degrees := self direction.	degrees ~= 0		ifTrue: [1				to: vertices size				do: [:index | vertices at: index put: ((vertices at: index)							rotateBy: degrees degreesToRadians							about: center) rounded]].	aCanvas drawPolygon: vertices fillStyle: aColor! !!Bot methodsFor: 'private drawing' stamp: 'sd 5/2/2004 21:04'!circleNoDirectionDrawOn: aCanvas position: aPoint color: aColor 	"Draw the receiver as a circle."		| myExtent myCenter diameter |	myExtent := self extent.	myCenter := aPoint + (myExtent // 2).	diameter := myExtent x min: myExtent y.	aCanvas		fillOval: (Rectangle center: myCenter extent: diameter * 0.85)		color: aColor.	aCanvas		line: myCenter		to: myCenter + ((diameter // 2) - 1 @ 0)		width: 2		color: Color black! !!Bot methodsFor: 'private drawing' stamp: 'sd 7/9/2002 10:40'!clearBotBuffer	"Clear the internal turtle buffer"	turtleBuffer :=  nil.! !!Bot methodsFor: 'private drawing' stamp: 'sd 1/2/2005 12:13'!drawOn: aCanvas 	"Draw the receiver if it is visible"		| form2 form formAndOffset offset myCenter |	shown ifFalse: [^ self].	form := self turtleBuffer form.	formAndOffset := WarpBlt				rotate: form				degrees: self direction				center: form center				scaleBy: 1 @ 1				smoothing: 1.	form2 := formAndOffset at: 1.	offset := formAndOffset at: 2.	myCenter := self extent // 2.	aCanvas		image: form2		at: self position + myCenter - (form extent // 2) + offset		sourceRect: form2 boundingBox		rule: Form paintAlpha		alpha: self alpha! !!Bot methodsFor: 'private drawing' stamp: 'nk 2/7/2005 08:15'!drawTrailFrom: startPoint to: endPoint 	"Draw a line between startPoint and endPoint"		self trailMorph		ifNotNilDo: [:tm | tm				drawLineFrom: startPoint				to: endPoint				color: penColor				size: penSize]! !!Bot methodsFor: 'private drawing' stamp: 'sd 5/2/2004 22:54'!fillBotBuffer	"Draw the turtle on a internal buffer using the right  	representation"		| myCenter |	turtleBuffer := (Form extent: self extent depth: self world canvas form depth) getCanvas.	self isLookingLikeImage		ifTrue: [				myCenter := (self extent // 2).				turtleBuffer 					image: image					at: myCenter - (image extent // 2)					sourceRect: image boundingBox					rule: Form paint.				^ self].	self		perform: drawSelector		withArguments: (Array				with: turtleBuffer				with: 0 @ 0				with: (self color alpha: 1))! !!Bot methodsFor: 'private drawing' stamp: 'NS 6/27/2002 11:39'!imageScaleFactor		| e1 m1 e2 m2 |	e1 := self extent // 2.	m1 := e1 x min: e1 y.	e2 := image extent // 2.	m2 := (e2 x squared + e2 y squared) sqrt.	^ (m1 / m2) asFloat asPoint! !!Bot methodsFor: 'private drawing' stamp: 'sd 5/3/2004 09:46'!robotNoDirectionDrawOn: aCanvas position: aPoint color: aColor 	"Draw the receiver as a robot but always pointing to the east.  	The rotation is handled by the imageDrawing..."		| myExtent myCenter diameter farPoint rayon |	myExtent := self extent.	myCenter := aPoint + (myExtent // 2).	diameter := myExtent x min: myExtent y.	rayon := diameter // 2.	farPoint := myCenter + (rayon - 2 @ 0).	aCanvas		fillRectangle: (Rectangle center: myCenter - (0 @ (rayon * 0.65)) extent: rayon @ (diameter * 0.25))		color: Color gray.	aCanvas		fillRectangle: (Rectangle center: myCenter + (0 @ (rayon * 0.65)) extent: rayon @ (diameter * 0.25))		color: Color gray.	aCanvas		fillOval: (Rectangle center: myCenter extent: diameter * 0.65)		color: aColor.	aCanvas		line: myCenter		to: farPoint		width: 2		color: Color black.	aCanvas		fillRectangle: (Rectangle center: farPoint extent: 4)		color: Color red! !!Bot methodsFor: 'private drawing' stamp: 'sd 5/2/2004 21:24'!triangleNoDirectionDrawOn: aCanvas position: aPoint color: aColor 	"Draw the receiver as a triangle"		| min p1 p2 p3 dir vertices center myExtent |	myExtent := self extent.	center := aPoint + (myExtent // 2).	min := (myExtent x min: myExtent y)				// 2.	dir := (min / 2 sqrt) truncated.	dir := dir @ (dir - 2).	p1 := center - dir.	dir := dir x @ dir y negated.	p2 := center - dir.	p3 := center x + min @ center y.	vertices := Array				with: p1				with: p2				with: p3.	aCanvas drawPolygon: vertices fillStyle: aColor! !!Bot methodsFor: 'private drawing' stamp: 'sd 7/9/2002 10:47'!turtleBuffer	"Return the turtle buffer"	turtleBuffer isNil 		ifTrue: [self fillBotBuffer].	^ turtleBuffer! !!Bot methodsFor: 'drawing' stamp: 'sd 2/17/2005 21:16'!color: aColor	self yield.	self clearBotBuffer.	super color: aColor.! !!Bot methodsFor: 'drawing' stamp: 'sd 2/17/2005 21:15'!extent: aPoint 	"Change the receiver's extent, but check for a minimun"		| newBounds |	self yield.	newBounds := self calcBoundsForExtent: aPoint.	self bounds = newBounds		ifTrue: [^ self].	self changed.	bounds := newBounds.	self clearBotBuffer.	self layoutChanged.	self changed! !!Bot methodsFor: 'drawing' stamp: 'sd 7/9/2002 10:09'!foreground	"Bring the receiver to the foreground"	self owner addMorphFront: self.! !!Bot methodsFor: 'drawing' stamp: 'sd 7/9/2002 10:11'!penColor	"Return the color of the pen"		^ penColor! !!Bot methodsFor: 'drawing' stamp: 'sd 2/19/2005 13:14'!penColor: aColor 	"Change the color of the pen to be aColor"	self yield.	penColor := aColor! !!Bot methodsFor: 'drawing' stamp: 'sd 7/9/2002 10:14'!penSize	"Return the size of the pen"	^ penSize! !!Bot methodsFor: 'drawing' stamp: 'sd 2/19/2005 13:14'!penSize: anInteger	"Change the size of the pen to be anInteger"	self yield.	penSize := anInteger! !!Bot methodsFor: 'process control' stamp: 'nk 2/7/2005 08:33'!delayTillEndOfSlice 	owner ifNil: [ BotProcessTermination signal ]		ifNotNil: [ BotProcess delayTillEndOfSlice]! !!Bot methodsFor: 'process control' stamp: 'nk 2/7/2005 08:58'!yield	owner ifNil: [ BotProcessTermination signal ]		ifNotNil: [ BotProcess yield ]! !!Bot methodsFor: 'directions' stamp: 'sd 6/28/2002 11:35'!direction		^ direction! !!Bot methodsFor: 'directions' stamp: 'sd 7/22/2002 08:04'!down	"Make the receiver pointing to the bottom of the screen."		self south! !!Bot methodsFor: 'directions' stamp: 'sd 7/22/2002 08:04'!left	"Make the receiver pointing to the left of the screen."		self west! !!Bot methodsFor: 'directions' stamp: 'sd 7/22/2002 08:04'!right	"Make the receiver pointing to the right of the screen."		self east! !!Bot methodsFor: 'directions' stamp: 'sd 7/22/2002 08:04'!up	"Make the receiver pointing to the top of the screen."		self north! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:59'!east	"Make the receiver pointing to the east."		self turnTo: 0! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!north	"Make the receiver pointing to the north."		self turnTo: 90! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!northEast	"Make the receiver pointing to the north-east."		self turnTo: 45! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!northWest	"Make the receiver pointing to the north-West."		self turnTo: 135! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!south	"Make the receiver pointing to the south."		self turnTo: 270! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!southEast	"Make the receiver pointing to the south-west."		self turnTo: 315! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!southWest	"Make the receiver pointing to the south-west."		self turnTo: 225! !!Bot methodsFor: 'absolute directions' stamp: 'sd 7/9/2002 09:58'!west	"Make the receiver pointing to the west."		self turnTo: 180! !!Bot methodsFor: 'private image' stamp: 'sd 2/19/2005 13:15'!getImageFromClass	"Set the image associated with the class to be associated with the receiver"		self yield.	self class hasImage ifFalse: [^ self].	self image: self class image! !!Bot methodsFor: 'private image' stamp: 'sd 2/19/2005 13:15'!image: aForm 	"Change the image used as graphical representation"			self yield.	image := aForm.	"self isLookingLikeImage			ifFalse: [^ self]."	self clearBotBuffer.	self changed! !!Bot methodsFor: 'private image' stamp: 'sd 7/9/2002 10:45'!isLookingLikeImage	"Return whether the receiver should be visually represented by a graphics"	^ drawSelector = self class imageDrawSelector! !!Bot methodsFor: 'private image' stamp: 'sd 1/6/2005 10:12'!setImageFromClass	"Set the image associated with the class to be associated with the receiver"		self class hasImage ifFalse: [^ self].	self image: self class image! !!Bot methodsFor: 'private image' stamp: 'NS 6/27/2002 15:32'!setImageFromMorph: aMorph 		self image: (self class getImageFromMorph: aMorph)! !!Bot methodsFor: 'operations' stamp: 'sd 2/19/2005 13:16'!goTo: aPoint 	"make the receiver go at a given point of the screen. The  	receiver let a trace on the screen from its current position to  	the final point."	self yield.	self drawTrailFrom: self center to: aPoint.	self center: aPoint! !!Bot methodsFor: 'operations' stamp: 'sd 3/30/2005 10:25'!go: distance 	"make the receiver go forward a given distance (in pixels)"		self goTo: (self positionIfGo: distance)! !!Bot methodsFor: 'operations' stamp: 'sd 4/29/2004 21:17'!home	"position the receiver in the starting place"		self jumpToStartingPlace! !!Bot methodsFor: 'operations' stamp: 'sd 4/29/2004 21:17'!jumpToStartingPlace	"Position the receiver in the middle of the morph that owns it."		self jumpTo: self startingPlace! !!Bot methodsFor: 'operations' stamp: 'sd 4/29/2004 21:17'!jumpTo: aPoint 	"changes the receiver position so that its center is placed at the  	position aPoint"		self center: aPoint! !!Bot methodsFor: 'operations' stamp: 'sd 8/10/2004 14:10'!jump: distance 	"make the receiver goes forward from a given distance but 	without making a trace on 	 the screen"		self		jumpTo: (self positionIfGo: distance)! !!Bot methodsFor: 'initialization' stamp: 'sd 3/19/2005 20:35'!initializeToStandAlone	"Initialize a newly created object"	"Bot newStandAlone openInWorld"		super initializeToStandAlone.	self extent: 80 @ 80.	self privateInitialize.	direction := self canonicalAngle: 0.	self clearBotBuffer.	self penSize: 1.	self beVisible.	self		color: (Color blue alpha: 0.85).	self penColor: Color black.	self		balloonFont: (StrikeFont familyName: #ComicPlain size: 17).! !!Bot methodsFor: 'initialization' stamp: 'NS 7/29/2002 16:54'!setAtStartingPlace	"Position the receiver in the middle of the morph that owns it. Do not use jump to avoid animation"	self center: self startingPlace! !!Bot methodsFor: 'variables' stamp: 'sd 11/20/2003 10:18'!isVariableDefined: aSymbol 	"Tell whether a variable named aSymbol is defined"		^ vars includesKey: aSymbol! !!Bot methodsFor: 'variables' stamp: 'sd 11/20/2003 10:17'!set: aSymbol to: anObject 	"Defines a turtle variable named aSymbol and assign anObject as value"		vars at: aSymbol put: anObject! !!Bot methodsFor: 'variables' stamp: 'sd 11/20/2003 10:18'!valueOf: aSymbol 	"Return the value of the variable named aSymbol"		^ vars		at: aSymbol		ifAbsent: [self error: 'the turtle variable ' , aSymbol asString , ' is not defined']! !!Bot methodsFor: 'images' stamp: 'sd 2/26/2005 21:47'!loadImage	"Load an image from a file and install it as new graphics"	"Bot new loadImage"	| name |	name :=	FillInTheBlank  request: 'Give the name of the graphic you want to load' initialAnswer: 'r2d2'.	name isNil		ifFalse: [self loadImage: name]	! !!Bot methodsFor: 'images' stamp: 'sd 2/26/2005 21:51'!loadImage: aString	"Load an image from a file and install it as new graphics"	"Bot new loadImage: 'luth'"	| stream res |	stream := FileStream readOnlyFileNamed: aString, '.frm'.	res := (Object readFrom: stream).	"res := Compiler new evaluate: stream in: nil to: nil notifying: nil ifFail: [nil]."	res isNil		ifTrue: [PopUpMenu inform: 'Problem with the file ', aString, '.frm']		ifFalse: [(res isKindOf: Form)					ifTrue: [self image: res]]	! !!Bot methodsFor: 'images' stamp: 'sd 5/2/2004 17:59'!lookLikeBot	"Make the receiver look like a Bot"		self drawSelector: self class robotDrawSelector.	self clearBotBuffer! !!Bot methodsFor: 'images' stamp: 'sd 7/9/2002 10:11'!lookLikeCircle	"Make the receiver look like a circle"	self drawSelector: self class circleDrawSelector.	self clearBotBuffer.! !!Bot methodsFor: 'images' stamp: 'sd 1/6/2005 10:13'!lookLikeImage	"If an image has been defined or loaded, make the receiver look  	like the image"		image isNil and: [self class hasImage not 						ifTrue: [^ self]]. 	image isNil 		ifTrue: [self getImageFromClass].		self drawSelector: self class imageDrawSelector.	self clearBotBuffer! !!Bot methodsFor: 'images' stamp: 'sd 5/2/2004 21:11'!lookLikeTriangle	"Make the receiver look like a triangle"		self clearBotBuffer.	self drawSelector: self class triangleDrawSelector! !!Bot methodsFor: 'images' stamp: 'sd 1/3/2005 22:27'!saveImage	"Save the current graphic prompting the user for a name"		| name |	name :=	FillInTheBlank  request: 'Give a name to your graphic' initialAnswer: 'r2d2'.	name isNil 		ifFalse: [name isEmpty ifFalse: [self saveImage: name]]		! !!Bot methodsFor: 'images' stamp: 'sd 1/3/2005 18:29'!saveImage: aString	"Save the current graphics on a file named aString"		| stream |	stream := FileStream newFileNamed: aString, '.frm'.	image storeOn: stream.		! !!Bot methodsFor: 'memory' stamp: 'sd 3/26/2004 19:15'!memorizedPoints	^ memorizedPoints! !!Bot methodsFor: 'memory' stamp: 'sd 2/19/2005 13:16'!rememberPosition		self yield.	memorizedPoints add: self center! !!Bot methodsFor: 'memory' stamp: 'sd 3/26/2004 19:19'!resetMemorizedPoints		memorizedPoints := OrderedCollection new! !!Bot methodsFor: 'turning' stamp: 'sd 3/30/2005 10:28'!pattern     "draws a pattern"   		self go: 100.	self turnRight: 90.	self go: 100.	self turnRight: 90.	self go: 50.	self turnRight: 90.	self go: 50.	self halt.	self turnRight: 90.	self go: 100.	self turnRight: 90.	self go: 25.	self turnRight: 90.	self go: 25.	self turnRight: 90.	self go: 50 ! !!Bot methodsFor: 'turning' stamp: 'sd 3/29/2005 19:41'!pattern4 	"draws four patterns"	4 timesRepeat: 		[ self pattern ] ! !!Bot methodsFor: 'turning' stamp: 'sd 7/9/2002 09:56'!pointAt: aPoint 	"Make the receiver pointing in the direction of a given point"		self turnTo: (self absoluteAngleToPointAt: aPoint)! !!Bot methodsFor: 'turning' stamp: 'sd 3/30/2005 09:54'!turnLeft: degrees 	"change the direction of the receiver by a certain  number of degrees to the left."		self turn:  degrees.! !!Bot methodsFor: 'turning' stamp: 'sd 3/30/2005 09:54'!turnRight: degrees 	"change the direction of the receiver by a certain  number of degrees to the right."		self turn:  degrees negated.! !!Bot methodsFor: 'turning' stamp: 'sd 7/9/2002 09:56'!turnTo: anInteger	"Change the direction of the receiver so that it points at the absolute angle 	represented by anInteger. See class comment"	self direction: anInteger! !!Bot methodsFor: 'turning' stamp: 'sd 3/10/2005 12:33'!turn: degrees 	"Change the direction of the receiver by a certain number of degrees. Following mathematical convention, a turn through a positive number of degrees is taken counterclockwise, while a turn through a negative  number of degrees is taken clockwise."		self direction: self direction + degrees.! !!Bot methodsFor: 'printing' stamp: 'sd 7/9/2002 10:49'!printOn: aStream 	"Write on aStream information relative to the receiver"	super printOn: aStream.	aStream nextPutAll: ' direction: ';		 nextPutAll:  direction asString;		 nextPutAll: ' position: ';		 nextPutAll: self center printString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Bot class	instanceVariableNames: ''!!Bot class methodsFor: 'constants' stamp: 'sd 5/2/2004 21:00'!circleDrawSelector	"Return the method selector of the method drawing the circel 	based graphical representation"		^ #circleNoDirectionDrawOn:position:color:! !!Bot class methodsFor: 'constants' stamp: 'sd 7/9/2002 10:56'!imageDrawSelector	"Return the method selector of the method drawing the circel based graphical 	representation"	^ #imageDrawOn:position:color: ! !!Bot class methodsFor: 'constants' stamp: 'sd 5/2/2004 18:09'!robotDrawSelector	"Return the method selector of the method drawing the robot"		^ #robotNoDirectionDrawOn:position:color:! !!Bot class methodsFor: 'constants' stamp: 'sd 5/2/2004 21:00'!triangleDrawSelector	"Return the method selector of the method drawing the triangle 	based graphical representation"		^ #triangleNoDirectionDrawOn:position:color:! !!Bot class methodsFor: 'shapes' stamp: 'sd 1/6/2005 09:39'!clearImage	"Reset the image based representation"	Image := nil.	self perform: DefaultDisplaySelector ! !!Bot class methodsFor: 'shapes' stamp: 'sd 7/9/2002 10:55'!drawSelector	"Return the default drawing selector"	^ DrawSelector! !!Bot class methodsFor: 'shapes' stamp: 'sd 3/4/2004 22:43'!hasImage	"Return whether an image has been associated with the class"		^ Image isNil not! !!Bot class methodsFor: 'shapes' stamp: 'sd 7/9/2002 10:56'!image	"Return the image associated with the class"	^ Image! !!Bot class methodsFor: 'shapes' stamp: 'sd 7/9/2002 10:56'!image: aForm	"Set the image associated with the class"	Image := aForm! !!Bot class methodsFor: 'shapes' stamp: 'sd 5/3/2004 09:50'!lookLikeBot	"Set the default way of representing the robot"		DrawSelector := self robotDrawSelector! !!Bot class methodsFor: 'shapes' stamp: 'sd 5/3/2004 09:50'!lookLikeCircle	"Set the default way of representing the robot to be a circle"		DrawSelector := self circleDrawSelector! !!Bot class methodsFor: 'shapes' stamp: 'sd 1/3/2005 09:28'!lookLikeImage	"If an image has been defined or loaded, set the default  		way of representing the robot to be a circle"	Image isNil  	     ifTrue: [^ self].  	DrawSelector := self imageDrawSelector.	"this way we always draw via the image"		"self setImageFromMorph: self new"! !!Bot class methodsFor: 'shapes' stamp: 'sd 5/3/2004 09:50'!lookLikeTriangle	"Set the default way of representing the robot to be a circle"		DrawSelector := self triangleDrawSelector! !!Bot class methodsFor: 'cleaning' stamp: 'sd 7/9/2002 10:59'!clearTrails	"Clear all the turtle trails"	World clearTurtleTrails! !!Bot class methodsFor: 'cleaning' stamp: 'sd 7/9/2002 11:00'!clearWorld	"Clear all the turtle trails and delete all the turtles"	self clearTrails.	self deleteAllBots! !!Bot class methodsFor: 'cleaning' stamp: 'sd 7/9/2002 11:00'!deleteAllBots	"Delete all the turtles"	self allSubInstances		do: [:each | each delete]! !!Bot class methodsFor: 'cleaning' stamp: 'sd 7/9/2002 11:00'!deleteBots	"Delete all the turtles of this class"	self allInstances do: [:aBot | aBot delete]! !!Bot class methodsFor: 'halos' stamp: 'sd 1/2/2005 17:52'!createHalosSpec: anArray	"I should cache that"		| aColor|	^ anArray collect:			[:quin |				aColor := Color.				quin fourth do: [:sel | aColor := aColor perform: sel].				HaloSpec new 					horizontalPlacement: quin second					verticalPlacement: quin third 					color: aColor					iconSymbol: quin fifth					addHandleSelector: quin first]! !!Bot class methodsFor: 'halos' stamp: 'sd 1/4/2005 09:01'!rawHaloSpec	"self initialize"	^ #(	"  	selector				horiz		vert			color info						icon key		---------				------		-----------		-------------------------------		---------------"	"(addDebugHandle:		right		topCenter		(blue	veryMuchLighter)		'Halo-Debug')"	(addDismissHandle:		left			top				(red		muchLighter)			'Halo-Dismiss')	"(addMenuHandle:		leftCenter	top				(red)							'Halo-Menu')"	(addGrabHandle:			center		top				(black)							'Halo-Grab')	"(addDragHandle:			rightCenter	top				(brown)						'Halo-Drag')"	(addDupHandle:			right		top				(green)							'Halo-Dup')		"(addHelpHandle:			center		bottom			(lightBlue)					'Halo-Help')"	(addGrowHandle:		right		bottom			(yellow)						'Halo-Scale')	"(addScaleHandle:		right		bottom			(lightOrange)					'Halo-Scale')"	"(addScriptHandle:		rightCenter	bottom			(green muchLighter)			'Halo-Script')"	(addPaintBgdHandle:		right		center			(lightGray)						'Halo-Paint')	(addViewingHandle:		leftCenter	bottom			(lightGreen lighter)				'Halo-View')	"(addRepaintHandle:		right		center			(lightGray)						'Halo-Paint')"	(addDrawBotHandle:	     left	         bottom 	         (red)			                   'Halo-Paint')	(addSaveBotHandle:	     left          topCenter 	    (blue)			                    'Halo-Menu')	(addLoadBotHandle:	     left 	    center 	         (pink)			                    'Halo-Debug')     (addPassToClassHandle:	left    	bottomCenter	    (lightOrange)			 'Halo-Tile')						) 	"Bot initialize"! !!Bot class methodsFor: 'debug' stamp: 'sd 1/2/2005 17:49'!debug	"Bot debug"		| caro point1 point2 point3 translation |	World clearTurtleTrails.	Bot deleteAllBots.	self halt.	point1 := 200 @ 300.	point2 := 200 @ 250.	point3 := 150 @ 300.	translation := 50 @ 75.	caro := self new.	caro jumpTo: point1.	caro goTo: point2.	caro goTo: point3.	caro goTo: point1.	point1 := point1 + translation.	point2 := point2 + translation.	point3 := point3 + translation.	caro jumpTo: point1.	caro goTo: point2.	caro goTo: point3.	caro goTo: point1! !!Bot class methodsFor: 'debug' stamp: 'sd 1/2/2005 17:49'!debug2	"Bot debug2"		| caro |	World clearTurtleTrails.	Bot deleteAllBots.	caro := self new.	"caro lookLikeTriangle."	caro go: 100.	caro turn: 90.	caro go: 200.	caro turn: 90.	caro go: 250.	caro goTo: 400 @ 400.	caro turn: 90! !!Bot class methodsFor: 'debug' stamp: 'sd 1/2/2005 17:49'!debug3	"Bot debug3"		| caro point1 point2 point3 |	World clearTurtleTrails.	Bot deleteAllBots.	point1 := 200 @ 300.	point2 := 200 @ 250.	point3 := 150 @ 300.	caro := self new.	caro jumpTo: point1.	caro jumpTo: point2.	caro goTo: point3.	caro goTo: point1.	point1 := point1 + (100 @ 100).	point2 := point2 + (100 @ 100).	point3 := point3 + (100 @ 100).	caro jumpTo: point1.	caro goTo: point2.	caro goTo: point3.	caro goTo: point1! !!Bot class methodsFor: 'examples' stamp: 'sd 3/7/2004 21:54'!example1		| caro |	caro := Bot new.	20		timesRepeat: [caro penColor: Color green.			caro penSize: 4.			10				timesRepeat: [caro go: 1].			caro penSize: 1.			caro penColor: Color blue.			10				timesRepeat: [caro go: 1]]! !!Bot class methodsFor: 'examples' stamp: 'sd 3/5/2004 16:09'!example2	| t2 |	t2 := Bot new.	t2 color: Color magenta.			t2 extent: 200 @ 200.			t2 extent: 100 @ 100.			t2 penSize: 1.			t2 penColor: Color brown.			t2 go: 300.			t2 turn: -92.			t2 lookLikeTriangle.			t2 go: 300.			t2 extent: 50 @ 50.			t2 turn: -92.			t2 color: Color red.			t2 go: 300.			t2 turn: -92.			t2 penSize: 3.			t2 penColor: Color green.			t2 lookLikeCircle.			t2 go: 300.			t2 turn: -92! !!Bot class methodsFor: 'deprecated' stamp: 'sd 7/9/2002 10:55'!getImageFromMorph: aMorph 	"Get an image from a Morph"	| worldForm bigForm |	worldForm := World canvas form.	bigForm := Form extent: worldForm extent depth: worldForm depth.	aMorph drawOn: bigForm getCanvas.	^ bigForm getCanvas contentsOfArea: aMorph bounds! !!Bot class methodsFor: 'deprecated' stamp: 'sd 7/9/2002 10:59'!setImageFromMorph: aMorph 	"Set the image represented by a morph the image associated with the class"	self image: (self getImageFromMorph: aMorph)! !!Bot class methodsFor: 'class initialization' stamp: 'sd 1/6/2005 09:41'!initialize	"Per default the newly created robot look like a robot.  	To make them looking like a Triangle: Bot lookLikeTriangle. "	"Bot initialize"		Halos := self createHalosSpec: (self rawHaloSpec).	self lookLikeBot.	DefaultDisplaySelector := #lookLikeBot  ! !!Bot class methodsFor: 'image in/out' stamp: 'sd 2/26/2005 09:47'!loadImage	"Load an image from a file and install it as new graphics"	| filename |	filename :=	FillInTheBlank  request: 'Give the name of the graphic you want to load' initialAnswer: 'r2d2'.	filename isNil		ifFalse: [self loadImage: filename]	! !!Bot class methodsFor: 'image in/out' stamp: 'sd 7/9/2002 11:01'!loadImage: aString	"Load an image from a file and install it as new graphics" 	| stream res |	stream := FileStream readOnlyFileNamed: aString, '.frm'.	res := Compiler new evaluate: stream in: nil to: nil notifying: nil ifFail: [nil].	res isNil		ifTrue: [PopUpMenu inform: 'Problem with the file ', aString, '.frm']		ifFalse: [(res isKindOf: Form)					ifTrue: [self image: res]]! !!Bot class methodsFor: 'image in/out' stamp: 'sd 2/26/2005 09:48'!saveImage	"Save the current graphic prompting the user for a name"		| filename |	filename :=	FillInTheBlank  request: 'Give a name to your graphic' initialAnswer: 'r2d2'.	filename isNil 		ifFalse: [filename isEmpty ifFalse: [self saveImage: filename]]		! !!Bot class methodsFor: 'image in/out' stamp: 'sd 1/3/2005 18:28'!saveImage: aString	"Save the current graphics on a file named aString"		| stream |	stream := FileStream newFileNamed: aString, '.frm'.	Image storeOn: stream.	! !!Bot class methodsFor: 'instance creation' stamp: 'nk 2/20/2005 11:04'!new	"Create a new turtle"	^[ (self newStandAlone)		openInWorld;		setAtStartingPlace; yourself ] on: BotProcessTermination		do: [ :ex | ex resume ].! !TestCase subclass: #BotTest	instanceVariableNames: 'turtle'	classVariableNames: ''	poolDictionaries: ''	category: 'Pica-Bot'!!BotTest commentStamp: '<historical>' prior: 0!I represent some tests of the Bot class.!!BotTest methodsFor: 'setup' stamp: 'sd 6/28/2002 10:59'!setUp	turtle := Bot new.! !!BotTest methodsFor: 'setup' stamp: 'sd 6/28/2002 10:59'!tearDown	turtle delete.! !!BotTest methodsFor: 'testing' stamp: 'sd 6/28/2002 10:59'!testAngleToBeInPosition	"self debug: #testAngleToBeInPosition"	turtle east.	self assert: (turtle angleToPointInDirection:  45) = 45.	self assert: (turtle angleToPointInDirection:  -45) = -45.	self assert: (turtle angleToPointInDirection: 0) = 0.	self assert: (turtle angleToPointInDirection: 90) = 90.	self assert: (turtle angleToPointInDirection: 180) = 180.	turtle north.	self assert: (turtle angleToPointInDirection: 135)  = 45.	self assert: (turtle angleToPointInDirection: 45)  = -45.		self assert: (turtle angleToPointInDirection: 225)  = 135.	turtle west.	self assert: (turtle angleToPointInDirection: 135)  = -45.	self assert: (turtle angleToPointInDirection: 225)  = 45.	turtle east.	self assert: (turtle angleToPointInDirection: 179)  = 179.	self assert: (turtle angleToPointInDirection: 181)  = -179.	self assert: (turtle angleToPointInDirection: -179)  = -179.	self assert: (turtle angleToPointInDirection: -181)  = 179.! !!BotTest methodsFor: 'testing' stamp: 'sd 4/29/2004 21:19'!testAngleToPointAt	"self debug: #testAngleToPointAt"		turtle jumpTo: 100 @ 100.	turtle east.	self assert: (turtle absoluteAngleToPointAt: 200 @ 0)			= 45.	self assert: (turtle angleToPointAt: 200 @ 0)			= 45.	turtle north.	self assert: (turtle absoluteAngleToPointAt: 200 @ 0)			= 45.	self assert: (turtle angleToPointAt: 200 @ 0)			= -45.	self assert: (turtle absoluteAngleToPointAt: 100 @ 200)			= -90.	self assert: (turtle angleToPointAt: 100 @ 200)			= -180.	self assert: (turtle absoluteAngleToPointAt: 0 @ 200)			= 225.	self assert: (turtle angleToPointAt: 0 @ 200)			= 135.	self assert: (turtle angleToPointAt: 100 @ 100)			= -90! !!BotTest methodsFor: 'testing' stamp: 'sd 4/29/2004 21:19'!testBearingAt	"self debug: #testBearingAt"		turtle jumpTo: 100 @ 100.	turtle east.	self assert: (turtle absoluteAngleToPointAt: 200 @ 0)			= 45.	self assert: (turtle angleToPointAt: 200 @ 0)			= 45.	turtle north.	self assert: (turtle absoluteAngleToPointAt: 200 @ 0)			= 45.	self assert: (turtle angleToPointAt: 200 @ 0)			= -45! !!BotTest methodsFor: 'testing' stamp: 'sd 6/28/2002 11:00'!testCanonicalAngle	"self debug: #testCanonicalAngle"	self assert: (turtle canonicalAngle:  45) = 45.	self assert: (turtle canonicalAngle:  -45) = -45.	self assert: (turtle canonicalAngle: 0) = 0.	self assert: (turtle canonicalAngle: 90) = 90.	self assert: (turtle canonicalAngle: 180) = 180.	self assert: (turtle canonicalAngle: 225)  = - 135.	self assert: (turtle canonicalAngle: 179)  = 179.	self assert: (turtle canonicalAngle: 181)  = -179.	self assert: (turtle canonicalAngle: -179)  = -179.	self assert: (turtle canonicalAngle: -181)  = 179.! !!BotTest methodsFor: 'testing' stamp: 'sd 4/29/2004 21:19'!testCenterAndPosition	"self debug: #testCenterAndPosition"		turtle jumpTo: 100 @ 100.	self assert: turtle center = (100 @ 100).	"the location of a turtle pen is its center but we cannot call it 	that way because position  		is in Morph the top left corner"	self assert: turtle position = (75 @ 80)! !!BotTest methodsFor: 'testing' stamp: 'sd 4/29/2004 21:19'!testDirectionToPointAt	"self debug: #testDirectionToPointAt"		turtle jumpTo: 100 @ 100.	self assert: (turtle absoluteAngleToPointAt: 200 @ 0)			= 45.	self assert: (turtle absoluteAngleToPointAt: 200 @ 200)			= -45.	self assert: (turtle absoluteAngleToPointAt: 100 @ 0)			= 90.	self assert: (turtle absoluteAngleToPointAt: 200 @ 100)			= 0.	self assert: (turtle absoluteAngleToPointAt: 0 @ 100)			= 180.	self assert: (turtle absoluteAngleToPointAt: 0 @ 0)			= 135.	self assert: (turtle absoluteAngleToPointAt: 0 @ 200)			= 225! !!BotTest methodsFor: 'testing' stamp: 'sd 4/29/2004 21:19'!testDistance	"self debug: #testDistance"		turtle jumpTo: 100 @ 100.	self assert: (turtle distanceFrom: 140 @ 130)			= 50! !!BotTest methodsFor: 'testing' stamp: 'sd 4/29/2004 21:19'!testPointingAt	"self debug: #testPointingAt"		turtle jumpTo: 100 @ 100.	turtle pointAt: 200 @ 0.	self assert: turtle direction = 45.	turtle pointAt: 200 @ 200.	self assert: turtle direction = -45.	turtle pointAt: 100 @ 0.	self assert: turtle direction = 90.	turtle pointAt: 200 @ 100.	self assert: turtle direction = 0.	turtle pointAt: 0 @ 100.	self assert: turtle direction = 180.	turtle pointAt: 0 @ 0.	self assert: turtle direction = 135.	turtle pointAt: 0 @ 200.	self assert: turtle direction = -135! !Bot initialize!